.Dt SQLITE3_COMPILEOPTION_USED 3
.Os
.Sh NAME
.Nm sqlite3_compileoption_used ,
.Nm sqlite3_compileoption_get ,
.Nm sqlite3_compileoption_used(X) ,
.Nm sqlite3_compileoption_get(X)
.Nd Run-Time Library Compilation Options Diagnostics
.Sh SYNOPSIS
.In sqlite3.h
.Ft int
.Fo sqlite3_compileoption_used
.Fa "const char *zOptName"
.Fc
.Ft const char *
.Fo sqlite3_compileoption_get
.Fa "int N"
.Fc
.Fd #define sqlite3_compileoption_used(X)
.Fd #define sqlite3_compileoption_get(X)
.Sh DESCRIPTION
The sqlite3_compileoption_used() function returns 0 or 1 indicating
whether the specified option was defined at compile time.
The SQLITE_ prefix may be omitted from the option name passed to sqlite3_compileoption_used().
.Pp
The sqlite3_compileoption_get() function allows iterating over the
list of options that were defined at compile time by returning the
N-th compile time option string.
If N is out of range, sqlite3_compileoption_get() returns a NULL pointer.
The SQLITE_ prefix is omitted from any strings returned by sqlite3_compileoption_get().
.Pp
Support for the diagnostic functions sqlite3_compileoption_used() and
sqlite3_compileoption_get() may be omitted by specifying the SQLITE_OMIT_COMPILEOPTION_DIAGS
option at compile time.
.Pp
.Sh IMPLEMENTATION NOTES
These declarations were extracted from the
interface documentation at line 168.
.Bd -literal
#ifndef SQLITE_OMIT_COMPILEOPTION_DIAGS
SQLITE_API int sqlite3_compileoption_used(const char *zOptName);
SQLITE_API const char *sqlite3_compileoption_get(int N);
#else
# define sqlite3_compileoption_used(X) 0
# define sqlite3_compileoption_get(X)  ((void*)0)
#endif
.Ed
