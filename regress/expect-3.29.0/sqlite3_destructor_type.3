.Dt SQLITE3_DESTRUCTOR_TYPE 3
.Os
.Sh NAME
.Nm sqlite3_destructor_type ,
.Nm SQLITE_STATIC ,
.Nm SQLITE_TRANSIENT
.Nd constants defining special destructor behavior
.Sh SYNOPSIS
.In sqlite3.h
.Vt typedef void (*sqlite3_destructor_type)(void*);
.Fd #define SQLITE_STATIC
.Fd #define SQLITE_TRANSIENT
.Sh DESCRIPTION
These are special values for the destructor that is passed in as the
final argument to routines like
.Fn sqlite3_result_blob .
If the destructor argument is SQLITE_STATIC, it means that the content
pointer is constant and will never change.
It does not need to be destroyed.
The SQLITE_TRANSIENT value means that the content will likely change
in the near future and that SQLite should make its own private copy
of the content before returning.
.Pp
The typedef is necessary to work around problems in certain C++ compilers.
.Sh IMPLEMENTATION NOTES
These declarations were extracted from the
interface documentation at line 5298.
.Bd -literal
typedef void (*sqlite3_destructor_type)(void*);
#define SQLITE_STATIC      ((sqlite3_destructor_type)0)
#define SQLITE_TRANSIENT   ((sqlite3_destructor_type)-1)
.Ed
.Sh SEE ALSO
.Xr sqlite3_result_blob 3
